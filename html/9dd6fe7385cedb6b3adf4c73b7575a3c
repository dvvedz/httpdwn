http://academy.engelvoelkers.com [200]

{'Cache-Control': 'no-cache,no-store,must-revalidate', 'Pragma': 'no-cache', 'Transfer-Encoding': 'chunked', 'Content-Type': 'text/html;charset=UTF-8', 'Content-Encoding': 'gzip', 'Expires': 'Wed, 31 Dec 1969 23:59:59 GMT', 'Vary': 'Accept-Encoding', 'Set-Cookie': 'oam.Flash.REDIRECT=true; Expires=Thu, 01-Jan-1970 00:00:10 GMT; Path=/, oam.Flash.RENDERMAP.TOKEN=-198uqqpcga; Path=/; HttpOnly', 'X-UA-Compatible': 'IE=edge', 'Request-Context': 'appId=cid-v1:4be4fa0e-e061-4a70-976c-058a690d6479', 'Date': 'Fri, 15 Jan 2021 11:30:50 GMT'}

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-gb" lang="en-gb" class="no-js" prefix="og: http://ogp.me/ns#"><head>

        <link rel="shortcut icon" href="/data/client_design/engelvoelkers/ila/13.10.9.5/favicon.ico" type="image/x-icon" />
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <link rel="stylesheet" href="/resources/design/css/fonts.css" />
        <link rel="stylesheet" href="/data/client_design/engelvoelkers/ila/13.10.9.5/design/css/app.css" />
        <link rel="stylesheet" href="/resources/design/css/foundation-datepicker.css" />
        <link rel="stylesheet" href="/resources/design/css/jquery.reject.css" />
        <script type="text/javascript" src="/jamescore/jquery/dist/jquery.7faa15a054093f3b5d674e63b6567c835a6fa217.min.js"></script>
<script type="text/javascript" src="/jamescore/what-input/dist/what-input.36d0baa0aa85e42fb8a7a0c332ebc6e07244eb6b.min.js"></script>
<script type="text/javascript" src="/jamescore/foundation-sites/dist/js/foundation.fdf9ba184cf52eaf979213678c5a7f7c7a423ee9.min.js"></script>
<script type="text/javascript" src="/jamescore/motion-ui/dist/motion-ui.846b12eda743fea9bdb8b7da041551d0e7df0a9c.min.js"></script>
<script type="text/javascript" src="/jamescore/flipclock/compiled/flipclock.a9eda46e62b34c2d79416e87c6d55f27bb30a882.min.js"></script>
<script type="text/javascript" src="/jamescore/jquery.cookie/jquery.cookie.31e1bcc4cf805a2c2fee21f48ded1e598f64a2a8.min.js"></script>
<script type="text/javascript" src="/jamescore/foundation-datepicker/js/foundation-datepicker.d39512495bd4ce2e045f2db829e636e908a67602.min.js"></script>

        <script type="text/javascript" src="/resources/javascript/foundation_override.js"></script>
        <script type="text/javascript" src="/resources/javascript/learning_portal.js"></script>
        <script type="text/javascript" src="/resources/javascript/jquery_regex.js"></script>

        <script>
            var userLoggedIn = "false";
            if (userLoggedIn === 'true') {
                var isPGIntegration = "false";
                if (isPGIntegration === 'true') {
                    $(function () {
                        $(window).on('load', function () {
                            var pgServerUrl = "";
                            var pgUsername = "";
                            var script = document.createElement('script');
                            script.type = "text/javascript";
                            script.src = pgServerUrl;
                            script.setAttribute("data-user", pgUsername);
                            document.head.appendChild(script);
                        });
                    });
                }
            }
            var black_list = ['scroll', 'mouseenter', 'mouseleave', 'mousemove', 'mouseover', 'mouseout', 'mousewheel', 'pointermove', 'keypress', 'keyup'];
            __zone_symbol__BLACK_LISTED_EVENTS = black_list;
        </script>
        <title>Engel &amp; VÃ¶lkers Academy
        </title>
            <script>
                function bodyloadJS() {
                }
                ;
            </script>

    <script>
        /**
         * Global definitions
         */
        var contextPath = '';
        var solrUrl = "/solr/catalogindex/query";
        var postalCodeVerification = false;

        var mediaPlayer = {
            name: 'videojs',
            license: ''
        };

        var publicLearningPortalUrl = 'http://academy.engelvoelkers.com';
        // currently used only for European Commission
        var showMediaEventStatus = false;
        var showSkillAttainmentDate = false;
        var maxAllowedDate = 2099-12-31;
        var showDueDate = false;
        var showEnhancedHistoryLog = false;
        var isRemoveOrderedCourseButtonDisabled = false;
        var showSupervisorPriorityAndCommentsOnAccept = false;
        var showDuedateAndIdentificationByManager = false;
        var isEnrollmentDueDateMandatory = false;
        var isEnrollmentIdentificationMandatory = false;
        /**
         * James implementation
         */
        var dataUrlPrefix = "..";
        var uploadBaseUrl = "..";
        var dataUrlDownloadPostfix = "?provideAsDownload=true";

        var openAttachment = function (relativeDataPath) {
            window.location.href = dataUrlPrefix + relativeDataPath + dataUrlDownloadPostfix;
        };

        var embedJavascriptResources = function (dependencies, callback) {
            return james.embedJavascriptResources('/jamescore/', dependencies, callback);
        };

        /**
         * Creates a cookie to notify the Java-execution that a user-data has changed.
         */
        var notifyAboutUserUpdate = function() {
            var courseUpdateCookieName = "ILA_USER_PROFILE_UPDATE";
            var expiryInMinutes = "30";
            var contextPath = "";
            //"2017-04-25T11:44:01.426Z"
            var isoDateString = new Date().toISOString();
            //to comply with cookie-value-restrictions we replace colon and period with underscore
            //"2017-04-25T11_44_01.426Z"
            var cookieCompatibility = isoDateString.replace(/[:]/g, '_');
            createCookie(courseUpdateCookieName, cookieCompatibility, expiryInMinutes, contextPath);
        };

        /**
         * Invalidates the course room cookie in order to clear the course room session cache.
         */
        var invalidateCourseRoomCache = function() {
            var courseUpdateCookieName = "de.imc.ila.cache.COURSE_UPDATE";
            var expiryInMinutes = "30";
            var contextPath = "";
            var cookieValue = readCookie(courseUpdateCookieName);
            if (cookieValue === undefined) {
                cookieValue = 0;
            } else if (cookieValue !== "-1") {
                cookieValue = parseInt(cookieValue, 10) + 1;
            }
            createCookie(courseUpdateCookieName, cookieValue, expiryInMinutes, contextPath);
        };

        /**
         * Method to validate the user
         * Should perform login steps and redirect the user back.
         */
        var validateUserAndRedirect = function() {
            var locationObject = window.location;
            var relativePathWithQueryParams = locationObject.pathname + locationObject.search;
            var currentPathEncoded = encodeURIComponent(relativePathWithQueryParams);
            var currentFragmentIdEncoded = encodeURIComponent(locationObject.hash);
            var targetPath = '/pages/403-error.jsf';
            return openPageByPath(targetPath, '?incoming=' + currentPathEncoded + '&incomingFragmentId=' + currentFragmentIdEncoded, '');
        };

        var reloadCourseRoom = function () {
            invalidateCourseRoomCache();
            location.reload();
        };

        /**
         * Reloads the page with polling mode enabled.
         * @param forced indicates if a reload should be forced, even if polling is already enabled.
         */
        //<![CDATA[
        var reloadWithPollingModeEnabled = function (forced) {
            //A force reload is required for igs-polling
            var url = window.location.href;

            if (url.indexOf('pollingMode') === -1){
                var suffix = 'pollingMode=on#';
                var op = '?';
                if (url.indexOf('?') !== -1 && (url.indexOf('?') < url.indexOf('#'))) {
                    op = '&amp;';
                }
                //insert pollingMode before angular-fragment-identifier (#)
                url = url.replace('#', op + suffix);
                window.location.href = url;
            } else if (forced) {
                //forced reload
                window.location.reload();
            }
        };
        //]]>

        /**
         * Open a page with provided targetPath, query and hash.
         * The target path must contain a leading slash.
         * @newTab opens url in new tab if is true
         */
        var openPageByPath = function (targetPath, query, hash, newTab) {
            var targetUrl = "";
            if (contextPath !== "") {
                targetUrl = targetUrl + contextPath;
            }
            targetUrl = targetUrl + targetPath + query + hash;
            if(newTab) {
                window.open(targetUrl);
            } else {
                window.location.href = targetUrl;
            }
            //we must stop form submitting
            return false;
        };

        /**
         * Adds the parent course id if present
         */
        function appendParentCourseIdsIfPresent(parentCourseId, parentCourseSetId, query) {
            if (parentCourseId) {
                query = concatUrl(query, "parentCourseId=" + parentCourseId);
            }
            if (parentCourseSetId) {
                query = concatUrl(query, "parentCourseSetId=" + parentCourseSetId);
            }
            return query;
        }

        var openCourseComponent = function (courseId, mediaId, parentCourseId, openDirectly, runningLanguage) {
            var targetPath = '/pages/coursecontent.jsf';
            var query = "?courseId=" + courseId + "&mediaId=" + mediaId + "&pollingMode=on";
            var hasRunningLanguage = typeof(runningLanguage) !== 'undefined' && typeof(runningLanguage) === 'string';
            query += hasRunningLanguage ? '&runningLanguage=' + runningLanguage : '';
            query = appendParentCourseIdsIfPresent(parentCourseId, null, query);
            if (openDirectly) {
                query += "&openDirectly=" + openDirectly;
            }
            return openPageByPath(targetPath, query, '');
        };

        var openCourseForum = function (courseId, discussionId, parentCourseId) {
            var targetPath = '/pages/discussion.jsf';
            var query = "?courseId=" + courseId + "&discussionId=" + discussionId;
            query = appendParentCourseIdsIfPresent(parentCourseId, null, query);
            return openPageByPath(targetPath, query, '');
        };

        var openCourseLibraryComponent = function (courseId, mediaId, parentCourseId, runningLanguage) {
            var targetPath = '/pages/librarycontent.jsf';
            var query = "?courseId=" + courseId + "&mediaId=" + mediaId;
            var hasRunningLanguage = typeof(runningLanguage) !== 'undefined' && typeof(runningLanguage) === 'string';
            query += hasRunningLanguage ? '&runningLanguage=' + runningLanguage : '';
            query = appendParentCourseIdsIfPresent(parentCourseId, null, query);
            return openPageByPath(targetPath, query, '');
        };

        var openCatalogueMedia = function (catalogId, mediaId) {
            var extraParams = {'catalogId': catalogId};
            openCatalogueMediaForParams(mediaId, extraParams);
        };

        var openCatalogueMediaForParams = function (mediaId, extraParameters) {
            var targetPath = '/pages/mediacontent.jsf';
            var query = "?mediaId=" + mediaId;
            if (extraParameters) {
                // actually extra parameters must already containt the catalog id for a catalog element
                angular.forEach(extraParameters, function(value, key) {
                    query = concatUrl(query, key + "=" + value);
                });
            }
            return openPageByPath(targetPath, query, '');
        };

        /**
         * Easy concatenation of url. Adds the query parameter limiter automatically.
         * @param url - the already existing url
         * @param newParam - the param to be added
         */
        function concatUrl(url, newParam) {
            var lastCharacter = url[url.length - 1];
            if (lastCharacter !== "&" && lastCharacter !== "?") {
                url = url + "&";
            }
            return url + newParam;
        }

        var openCatalogue = function (catalogId, catalogueQuery, employeeId) {
            var targetPath = '/pages/catalogsearch.jsf';
            var query = "?";
            if (catalogId !== undefined && catalogId > 0) {
                query = concatUrl(query, "catalogId=" + catalogId);
            }
            if (employeeId !== undefined && employeeId > 0 && employeeId !== "@self") {
                query = concatUrl(query, "employeeId=" + employeeId);
            }
            if (catalogueQuery !== undefined) {
                query = concatUrl(query, catalogueQuery);
            }
            return openPageByPath(targetPath, query, '');
        };

        var openCatalogueWithConfig = function (catalogId, config) {
            var targetPath = '/pages/catalogsearch.jsf';
            var query = '?';
            if (catalogId !== undefined && catalogId > 0) {
                query = query + "catalogId=" + catalogId;
            }
            if (config !== undefined) {
                if(config.skillId !== undefined) {
                    if(query.length > 1) {
                        query += '&';
                    }
                    query += 'fq={!tag=skillIds} skillIds:(*/'+config.skillId+'/)';
                }
                if(config.sidebarExpanded !== undefined) {
                    if(query.length > 1) {
                        query += '&';
                    }
                    query += 'sidebarExpanded=' + config.sidebarExpanded;
                }
            }
            return openPageByPath(targetPath, query, '');
        };

        var openCourseRoom = function (courseId, parentCourseId) {
            var targetPath = '/pages/course.jsf';
            var query = "?courseId=" + courseId + "&pollingMode=on";
            if (parentCourseId) {
                query += "&parentCourseId=" + parentCourseId;
            }
            return openPageByPath(targetPath, query, '');
        };

        var openAccountActivation = function () {
          var targetPath = '/pages/accountactivation.jsf';
          return openPageByPath(targetPath, '', '');
        };

        var openLoginSuccess = function () {
          var targetPath = '/pages/login-success.jsf';
          return openPageByPath(targetPath, '', '');
        };

        var openLogin = function () {
            var targetPath = '/pages/login.jsf';
            var query = '?finishSignUp=true';
            return openPageByPath(targetPath, query, '');
        };

        var openCourseDetails = function (courseId, extraParameters, newTab) {
            var targetPath = '/pages/coursedescription.jsf';
            var query = "?courseId=" + courseId;
            if (extraParameters) {
                angular.forEach(extraParameters, function(value, key) {
                    query = concatUrl(query, key + "=" + value);
                });
            }
            return openPageByPath(targetPath, query, '', newTab);
        };

        var openEditUserSyllabusPage = function (courseId, userId, newTab) {
            var targetPath = '/pages/usersyllabus.jsf';
            var query = "?courseId=" + courseId + "&userId=" + userId;
            return openPageByPath(targetPath, query, '', newTab);
        };

        var openAttendancetrackingPage = function (courseId, newTab) {
            var targetPath = '/pages/attendancetracking.jsf';
            var query = "?courseId=" + courseId;
            if (newTab) {
                query += "&newTab=true";
            }
            return openPageByPath(targetPath, query, '', newTab);
        }
        var openProgrammeDetails = function (programmeId, catalogId, employeeId) {
            var targetPath = '/pages/programmes.jsf';
            var hash = "#!/" + programmeId;
            if (catalogId) {
                hash += "/" + catalogId;
                if (employeeId) {
                    hash += "/" + employeeId;
                }
            }

            return openPageByPath(targetPath, '', hash);
        };

        var openProgrammeCurriculum = function (programmeId) {
            var targetPath = '/pages/programmes.jsf';
            var hash = "#!/curriculum/" + programmeId;
            return openPageByPath(targetPath, '', hash);
        };

        function appendXSRFToken() {
            return "&XSRFToken=" + 'RTTvlwPYByhUZ6ddFf3tJZLsVh4PkF-3rTiWKGr50rk';
        }
        var performCourseOperation = function (bookingTypeId, operation, courseId, parentCourseId, parentCourseSetId) {
            if (operation !== "cancel") {
                var targetPath = '/pages/coursedescription.jsf';
                var query = "?bookingTypeId=" + bookingTypeId;
                query += "&operation=" + operation;
                query += "&courseId=" + courseId;
                query += appendXSRFToken();
                query = appendParentCourseIdsIfPresent(parentCourseId, parentCourseSetId, query);
                return openPageByPath(targetPath, query, '');
            } else {
                console.error("Unsupported course operation: " + operation);
            }
        };

        var openMyCourses = function (category, personId) {
            var targetPath = '/pages/personalarea.jsf';
            var migratedPersonId = personId !== undefined ? personId : '@self'; //fallback if not specified
            var hash = "#!/users/" + migratedPersonId + "/contents" + (category? "/" + category : "");
            return openPageByPath(targetPath, '', hash);
        };

        var openManageTrainings = function () {
            var targetPath = "/pages/contentdesign.jsf";
            var hash = "#!/manage";
            return openPageByPath(targetPath, '', hash);
        };

        var openMyCompetencies = function (category, personId) {
            var targetPath = "/pages/competencies.jsf";
            var migratedPersonId = personId !== undefined ? personId : '@self'; //fallback if not specified
            var hash = "#!/users/" + migratedPersonId + "/competencies/" + category;
            return openPageByPath(targetPath, '', hash);
        };

        var openMyStaff = function () {
            var targetPath = "/pages/mystaff.jsf";
            return openPageByPath(targetPath, '', '');
        };

        var openBatchEnrollment = function (userIds) {
            var targetPath = "/pages/batchenrollment.jsf";
            return openPageByPath(targetPath, '', '#select-course?employeeIds=' + userIds.join(","));
        };

        var openMyStaffNavigation = function() {
            var targetPath = "/";
            return openPageByPath(targetPath, '', '');
        };

        /**
         * opens the checkout page to handle the enrolment request
         * method arguments (in order): courseId, catalogId, programmeId, templateId, participantId, parentCourseId, parentCourseSetId, employeeId, voucherCode
         */
        var openCheckout = function (courseId, catalogId, programmeId, templateId, participantId, parentCourseId, parentCourseSetId, employeeId, voucherCode) {
            var targetPath = '/pages/checkout.jsf';
            var query = concatUrl("?courseId=" + courseId, "participantId=" + participantId);
            if (catalogId) {
                query = concatUrl(query, "catalogId=" + catalogId);
            } else if (programmeId) {
                query = concatUrl(query, "programmeId=" + programmeId);
            }
            if (templateId) {
                query = concatUrl(query, "templateId=" + templateId);
            }
            if (employeeId) {
                query = concatUrl(query, "employeeId=" + employeeId);
            }
            if (voucherCode) {
                query = concatUrl(query, "voucherCode=" + voucherCode);
            }
            query += appendXSRFToken();
            query = appendParentCourseIdsIfPresent(parentCourseId, parentCourseSetId, query);
            return openPageByPath(targetPath, query, '');
        };

        var open403ErrorPage = function () {
            var targetPath = '/pages/403-error.jsf?incoming=%2Fpages%2Fsaml-request.jsf';
            return openPageByPath(targetPath, '', '');
        };

        var open404ErrorPage = function () {
            var targetPath = '/pages/404-error.jsf';
            return openPageByPath(targetPath, '', '');
        };

        var openSystemErrorPage = function () {
            var targetPath = '/pages/system-error.jsf';
            return openPageByPath(targetPath, '', '');
        };

		 var openUserProfile = function (participantId, newTab) {
            var targetPath=  '/pages/userprofile.jsf';
            var hash = "#!/view/" + participantId;
            return openPageByPath(targetPath, '', hash, newTab);
        };

        /**
         *  Open the profile of a course participant via the userprofile-functionality.
         */
        var openCourseParticipantProfile = function (courseId, participantId) {
            var targetPath=  '/pages/userprofile.jsf';
            var hash = "#!/view/course/" + courseId + "/participants/" + participantId;
            return openPageByPath(targetPath, '', hash);
        };

		 var openBookShelfMedia = function (mediaId) {
             var targetPath = '/pages/bookshelfmedia.jsf';
             var query = "?mediaId=" + mediaId;
             return openPageByPath(targetPath, query, '');
        };

        var openMyExperiences = function (category) {
            var targetPath = '/pages/myexperiences.jsf';
            var hash = "#!/";
            switch (category) {
                case "experiences":
                    hash += "experiences";
                    break;
                case "badges":
                    hash += "badges";
                    break;
            }
            return openPageByPath(targetPath, '', hash);
        };

        var logout = function () {
            var targetPath = '/pages/logout.jsf';
            return openPageByPath(targetPath, '', '');
        };

        var openCompetenciesPage = function (employeeId, tabSelector) {
        	var employeeSelector = (employeeId ? employeeId : '@self');
        	var targetPath = '/pages/competencies.jsf';
        	targetPath += '#!/users/' + employeeSelector + '/competencies/' + tabSelector;
        	return openPageByPath(targetPath, '', '');
        };

        /**
         * Search a (non-multivalued) query parameter value in a url
         * arg 1: the url to inspect
         * arg 2: the key to lookup
         */
        var getQueryParamValueFromUrl = function (url, queryParamKey) {
            //pattern is grouped
            // group 0 searches for the key
            // group 1 searches for the value
            var regExp = new RegExp("(" + queryParamKey + "=)([^&?#]*)");
            var match = regExp.exec(url);
            var result = "";
            if (match) {
                // index
                //  - 0 is the full match
                //  - 1 is the key
                //  - 2 is the value
                result = match[2];
            }
            return result;
        };

        function addQueryParameter(address, queryParamKey, newQueryParamValue) {
            var regExp = new RegExp("(" + queryParamKey + "=)([^&?#]*)");
            if (regExp.test(address)) {
                //locale is already present in current location query -> needs to be replaced
                address = address.replace(regExp, "$1" + newQueryParamValue);
            } else if (address === "") {
                //no query defined in location -> new query with queryparam (locale)
                address = '?' + queryParamKey + "=" + newQueryParamValue;
            } else {
                //query defined in location -> add queryparam (locale)
                address += '&' + queryParamKey + "=" + newQueryParamValue;
            }
            return address;
        }

        function addQueryParameterToCurrentUrl(queryParamKey, newQueryParamValue) {
            var queryString = addQueryParameter(location.search, queryParamKey, newQueryParamValue);
            var origin = location.origin;
            if (!origin) {
                //location.origin is not supported in IE10 -> if not defined create from other location properties
                origin = location.protocol + "//" + location.hostname + (location.port ? ':' + location.port : '');
            }
            return origin + location.pathname + queryString + location.hash;
        }

        /**
         * Update page target on language navi entry with hash-tag params.
		 * @param currentElement navigation entry to be updated
         */
		function updateLanguageEntry(currentElement) {
            var language = getQueryParamValueFromUrl(currentElement.href, "locale");

            currentElement.href = addQueryParameterToCurrentUrl("locale", language);
        }

        /**
         * Update language-section in footer and language drop down by adding/replacing the locale query parameter.
		 * '#NL_LANGAUGE_MENU_DROPDOWN .navi-language-entry'
         */
        var updateLangSelection = function () {
            $('#lang-selection .language-change-footer-entry').each(function(index, object){
                //footer item
                updateLanguageEntry(object);
            });
            $('.navi-language-entry').each(function (index, object) {
                //header item
                updateLanguageEntry(object);
            });
        };

        $(document).ready(function () {
            window.onhashchange = function () {
                updateLangSelection();
            };
            updateLangSelection();
        });


        /**
         * Closes all the foundation reveal dialogs, when the page is changed
         */
        $(window).bind('hashchange', function () {
            var allReveals = $('[data-reveal].reveal.open:not(.stay-open-on-hash-change)'); //get all the modals that are open
            var numberRevealsFound = allReveals.length;
            for (var i = 0; i < numberRevealsFound; i++) {
                var idReveal = allReveals[i].id;
                $('#' + idReveal).hide(); //if we do not hide it directly we'll have some strange side effects
                $('#' + idReveal).foundation('close');
            }
        });

        /**
         * Indicates the environment specific global date pattern in the user language.
         */
        var globalDatePattern = "d MMM yyyy";

        /**
         * Indicates the environment specific global time pattern in the user language.
         */
        var globalTimePattern = "HH:mm";
        /**
         * Indicates the environment specific global date time pattern in the user language.
         */
        var globalDateTimePattern = "d MMM yyyy HH:mm";
        /**
         * Indicates the environment specific global short date time pattern in the user language.
         */
        var shortDatePattern = "dd/MM/yyyy";

        //MomentJs compatible patterns
        var momentDatePatterns = {
            //unfortunately we have to change the pattern in order to support momentjs
            short: shortDatePattern.toUpperCase()
        };

        /**
         * Sets the decimal number format symbols for $locale
         * @param locale $locale service
         */
        var setDecimalFormatProperties = function(locale) {
            locale.NUMBER_FORMATS.DECIMAL_SEP = ".";
            locale.NUMBER_FORMATS.GROUP_SEP = ",";
        };

        /**
         * This variable defines whether the bundle keys or the corresponding bundle values are shown.
         */
        var showBundleKey = false;
        /**
         * This variable defines the current app language
         */
        var appLanguage = "en-gb";

        /**
         * This variable defines the date picker language
         */
        var foundationDatePickerLanguage = appLanguage;
        if (appLanguage === "en-gb") foundationDatePickerLanguage = "en-GB";
        if (appLanguage === "zh-cn") foundationDatePickerLanguage = "zh-CN";
        if (appLanguage === "zh-tw") foundationDatePickerLanguage = "zh-TW";
        if (appLanguage === "ko-kr") foundationDatePickerLanguage = "ko";
        if (appLanguage === "in-id") foundationDatePickerLanguage = "id";

        /**
         * Indication if password autocomplete option is enabled or not.
         * @type {string} 'on' if enabled, 'off' otherwise.
         */
        var passwordAutocomplete = "off";

        /**
         * Restapi Location
         * @type {string} e.g. "learningportal/restapi/"
         */
        var restapiLocation = "/restapi";
        /**
         * Anonymous RestAPI Location
         * @returns the path to the rest api
         */
        var anonymousRestapiLocation = "/commonrestapi";

        /**
         * registration Restapi Location
         * @type {string} e.g. "learningportal/registrationapi/"
         */
        var registrationRestapiLocation = "/registrationapi";

        /**
         * Gamification api Location
         * @type {string} e.g. "learningportal/rest/"
         */
        var gamificationapiLocation = "/rest";

        /**
         * OnClick- / ButtonFunction for downloading the course certificate.
         */
        var downloadCourseCertificate = function (courseId, userId) {
            if (userId && userId !== '@self') {
                window.location.href = restapiLocation + '/lms/users/' + userId + '/courses/' + courseId + '/certificate?provideAsDownload=true';
            } else {
                window.location.href = restapiLocation + '/lms/courses/' + courseId + '/certificate?provideAsDownload=true';
            }
        };

        /**
         * Content server
         * @type {string} e.g. "../data"
         */
        var contentServer = "https://academy.engelvoelkers.com/ils";

        /**
         * Client Design path
         */
        var clientDesignPath = "/data/client_design/engelvoelkers/ila/13.10.9.5/design";

        /**
         * Client Templates path
         */
        var clientTemplatesPath = "/data/client_design/engelvoelkers/ila/13.10.9.5/templates";

        /**
         * Internal content server
         * @type {string} e.g. "../data"
         */
        var internalContentServer = "https://academy.engelvoelkers.com/ils";

        /**
         * Internal content server context path
         * @type {string} e.g. "../data"
         */
        var internalContentServerContextPath = "/ils";

        /**
         * Internal content server
         * @type {string} e.g. "../data"
         */
        var internalContentServerUrlWithPort = "https://academy.engelvoelkers.com:80/ils";

        /**
         * Current user ID
         * @type {integer} e.g. 103127
         */
        var currentUserId = 0;

        /**
         * Timezone offset as a string
         * @type {string} e.g. "+0100"
         */
        var currentUserPreferredTimeZoneOffset = "";

        /**
         * Timezone identifier as a string
         * @type {string} e.g. "CET" or "Australia/Melbourne"
         */
        var currentUserPreferredTimeZoneIdentifier = "";

        /**
        * Indicates if remove pending enrolment is active or not
        */
        var removePendingEnrolment = false;

        var prebookingRemovalControl = {
            isAllowPrebookingRemoval: false,
            prebookingRemovalControlMetatag: ""
        };

        /**
        * Variable that holds the system config value, for enrolment by supervisor
        */
        var enrolmentBySupervisor = true;
        /**
         * Timezone identifier as a string
         * @type {string} e.g. "CET" or "Australia/Melbourne"
         */
        var getMomentTimeZoneIdentifier = function() {
            if (currentUserPreferredTimeZoneIdentifier === "" && moment !== undefined && moment.tz !== undefined) {
                //this is required for an anonymous user: According to DD, we should use moment in order to resolve the TZ.
                //in order to avoid multiple calls to moment (performance), let's store the value so that the next time, the first if condition will stop
                currentUserPreferredTimeZoneIdentifier = moment.tz.guess();
            }
            return currentUserPreferredTimeZoneIdentifier;
        };

        /**
         * Definition of the navigation settings
         */
        var navigation = {
            header: {
                sticky: false,
                stacked: true,
                floated: false
            }
        };

        var debug = false;
        var e2eTiles = false;
        var courseTileSettings = {
            labels: [{
                type: 'DUE_DATE',
                enabled: 0 > 0,
                settings: 0
            }]
        };
        var sortedMetadata = [];
        if ("registration-identifier, status, location, free-places, price, maintype, course-content-learning-form" !== "") {
            sortedMetadata = "registration-identifier, status, location, free-places, price, maintype, course-content-learning-form".split(",").map(function(item) {
                return item.trim();
            });
        }
        /**
        * LANGUAGES GLOBAL VARIABLE
        * */
        var DISPLAY_LANGUAGE_STYLE = "";
        var DISPLAY_LANGUAGE_ON_TILES = "".split(',');
        var DISPLAY_LANGUAGES = false;

        var userData = {
  "loggedIn" : false,
  "userId" : -1,
  "preferredLang" : "",
  "firstName" : "",
  "lastName" : "",
  "loginName" : "",
  "title" : "",
  "isSupervisor" : false,
  "isRegistrationDelegate" : false,
  "loginSource" : ""
};
        /**
         * Indication whether force login is enabled or not.
         */
        var forceLoginEnabled = true;

        var useComponentACLInCatalog = false;

        var learningFormSettings = {
            enabled: false,
            formId: 0,
            bundleName: ""
        };

        var hiddenProperties = "".split(',');

        var activeClientConfig = {
            clientId: 1,
            clientPattern: "anonymous",
            clientPatternType: "PARAMETER",
            credentialBased: false,
            oAuth: true
        };

        if (false) {
            (function (window, clientConfig) {
                if (clientConfig.clientPatternType === "PARAMETER") {
                    var url = addQueryParameterToCurrentUrl("client", clientConfig.clientPattern);
                    window.history.replaceState(null, null, url);
                }
            })(window, activeClientConfig);
        }

        var activeAuthConfiguration = {
            facebook: {
                enabled: false,
                appId: "",
                version: "v2.11",
                data: {
                    scope: "public_profile,email",
                    auth_type: ""
                }
            },
            saml: {
                enabled: true
            },
            windows: {
                enabled: false
            },
            basic: {
                enabled: false,
                showHrSystemSelection: false,
                hrSystemSelectOptions: [],
                hrSystemDefaultOption: ""
            },
            custom: {
                enabled: false
            },
            selfRegistration: {
                enabled: false
            },
            passwordRequest: {
                enabled: false
            },
            stayLoggedIn: {
                enabled: false
            },
            openIdConnect: {
                enabled: false
            }
        };

        var customTemplateMap = {};
        var templatePostfix = "?r=46792";
        var getCustomTemplatePath = function(originalTemplatePath) {
            var result = originalTemplatePath;
            var customEntry = customTemplateMap[originalTemplatePath];
            if (customEntry) {
                result = customEntry;
            }
            return result + templatePostfix;
        };

        var openClassification = function (dashboardId, rootClassificationId, classificationId) {
            var targetPath = '/pages/classificationsearch.jsf';
            var query = "?";
            if (dashboardId !== undefined && dashboardId > 0) {
                query = concatUrl(query, "dashboardId=" + dashboardId);
            }
            if (rootClassificationId !== undefined && rootClassificationId > 0) {
                query = concatUrl(query, "rootClassificationId=" + rootClassificationId);
            }
            if (classificationId !== undefined && classificationId > 0) {
                query = concatUrl(query, "classificationId=" + classificationId);
            }
            return openPageByPath(targetPath, query, '');
        };

        var openDashboard = function (dashboardId) {
            var targetPath = '/pages/internal-dashboard.jsf';
            var query = "?";
            if (dashboardId !== undefined && dashboardId > 0) {
                query = concatUrl(query, "dashboardId=" + dashboardId);
            }
            return openPageByPath(targetPath, query, '');
        };

        /**
         * Method that is called when an staff enrolment should be done
         * Param 1: the object type
         * Param 2: the object id
         * Param 3: the context id, e.g. catalogue id (optional)
         */
        var openStaffEnrolment = function (objectType, objectId, contextId) {
            var targetPath = '/pages/staffenrolment.jsf';
            var hashPath = "#!/" + objectType + "/" + objectId;
            if (contextId !== undefined && contextId > 0) {
                hashPath += "/" + contextId;
            }
            return openPageByPath(targetPath, '', hashPath);
        };
    </script>

    <!-- stylesheets -->
    <link rel="stylesheet" href="/classificationsearch/resources/design/css/autocomplete.mod.4.0.0.css" />

    <script type="text/javascript" src="/jamescore/james.a6ff649dc80d24717f8acc13dc9e2013cba3591e.min.js"></script>

    <script type="text/javascript">
        if (foundationDatePickerLanguage !== "en") {
            embedJavascriptResources([{'identifier': 'foundation-datepicker.' + foundationDatePickerLanguage}]);
        }
    </script>
        <script type="text/javascript" src="/resources/javascript/navi.js"> </script>
        <script type="text/javascript">
            var appInsights = window.appInsights || function (a) {
                function b(a) {
                    c[a] = function () {
                        var b = arguments;
                        c.queue.push(function () {
                            c[a].apply(c, b)
                        })
                    }
                }

                var c = {config: a}, d = document, e = window;
                setTimeout(function () {
                    var b = d.createElement("script");
                    b.src = a.url || "https://az416426.vo.msecnd.net/scripts/a/ai.0.js", d.getElementsByTagName("script")[0].parentNode.appendChild(b)
                });
                try {
                    c.cookie = d.cookie
                } catch (a) {
                }
                c.queue = [];
                for (var f = ["Event", "Exception", "Metric", "PageView", "Trace", "Dependency"]; f.length;) b("track" + f.pop());
                if (b("setAuthenticatedUserContext"), b("clearAuthenticatedUserContext"), b("startTrackEvent"), b("stopTrackEvent"), b("startTrackPage"), b("stopTrackPage"), b("flush"), !a.disableExceptionTracking) {
                    f = "onerror", b("_" + f);
                    var g = e[f];
                    e[f] = function (a, b, d, e, h) {
                        var i = g && g(a, b, d, e, h);
                        return !0 !== i && c["_" + f](a, b, d, e, h), i
                    }
                }
                return c
            }({
                instrumentationKey: "81b3bfe3-acb4-41c2-a829-a281c5b9bb3c"
            });
            window.appInsights = appInsights, appInsights.queue && 0 === appInsights.queue.length && appInsights.trackPageView();
        </script></head><body onload="bodyloadJS();" class="  stacked-content">
<script>

var utils = {
    notifications: {
        addPendingMessage: function() {
            console.error("Notification Plugin is not initialized yet.")
        }
    }
};

</script>

    <div id="notifications" tabindex="-1" aria-live="assertive"></div>


    <script>
        var notificationAppConfig = {
            appPath: "/notification/",
            globalNotificationDuration: "",
            overlapNotifications: false
        };
    </script>

    <script src="/notification/js/notificationRegistration.js"></script>

    <script>embedJavascriptResources([ 
{ 'identifier':'angular' },
{ 'identifier':'imc-templating-module' },
{ 'identifier':'angular-ui-notification' },
{ 'path': notificationAppConfig.appPath + 'js_vendor_min/app.46792.min.js'} ], function() {
      angular.bootstrap(document.getElementById('notification'), ['notification']);

});</script>

    <div id="notification">
        <div data-ng-controller="notificationListeningController"></div>
    </div>

  	<!--[if lte IE 8]>
		<script src="/resources/javascript/jreject/jquery.min.1.12.0.js"></script>
	<![endif]-->

     <script src="/resources/javascript/jreject/jquery.reject.js"></script>
      <script>
          function bodyloadJS() {          		
       	    $.reject({
     	            reject: {
       	            all: false,
       	          	msie: 9
       	         },
       			header: "Did you know that your Internet browser is no longer up-to-date?",
       			paragraph1: "Your Internet browser is no longer up-to-date and is no longer compatible with our website. Compatible browsers are listed below.",
       			paragraph2: "Click on one of the icons to download a browser",
       			closeMessage: "",
       			closeLink: "Close window",
       			close: "true" == "true" ? true : false,
       			closeCookie: true,
       			imagePath: '../resources/design/images/icons/',
       			display: ['firefox', 'chrome','msie']
       	     }); 
          };
      </script>

      <script>
          function agreeCookie() {
        	  var d = new Date();
        	  d.setTime(d.getTime() + (99999 * 24 * 60 * 60 * 1000));
        	  var expires = "expires="+d.toUTCString();
        	  document.cookie = "acceptPolicy=1; " + expires + ";path=/";
        	  var cookiePolicyContent = document.getElementById("cookiePolicy");
        	  cookiePolicyContent.style.display = "none";
          };
      </script>

	<div id="cookiePolicy">
		<div class="ui-notification-fix-bottom">
			<div class="ui-notification-fix-bottom__block">
			    <div class="ui-notification-fix-bottom__block__text">We use cookies to facilitate your use of our system. By using our system, you agree to the use of cookies. You can find further information in our <a href="/pages/external-dashboard.jsf?dashboardId=111222" target="_self">privacy statement</a>.
			    </div>
				<div class="ui-notification-fix-bottom__block__icon-wrapper">
					<a onClick="agreeCookie()" class="tab-focus" tabindex="0" aria-label="Close notification" title="Close notification">
					   <span class="icon-close-lean"></span>
					</a>
			    </div>
			</div>
		</div>
	</div>
        <h1 class="outline">Engel &amp; VÃ¶lkers Academy</h1>

        <noscript>
            <div class="no-javascript-supported">
                JavaScript is not enabled in your current browser. Please enable JavaScript to use the full range of functionality in this application.
            </div>
        </noscript>
            <div id="content-frame" class="entire-section">
                    <div class="contain-to-grid navigation-section" id="top-navi">

    <div class="hide-for-print top-navi-menu-wrapper  " id="top-navi-menu-wrapper">
        <div class="top-navi-wrapper" id="top-navi-menu">

    <nav class="imc-topbar  imc-topbar--stacked" role="navigation" aria-labelledby="menuTitleMainNavigation">
        <h2 class="outline" id="menuTitleMainNavigation">Main navigation</h2>
        <div class="grid-container imc-topbar__container"> <!-- limit max width-->
            <div class="imc-topbar__container__line">
        <span class="topnavi-logo"><a href="/pages/internal-dashboard.jsf?dashboardId=2" class="topnavi-logo__link" title="Open front page" aria-label="Logo">
                        <span class="topnavi-logo__link__alternative-text">Link to home page</span></a>
        </span>
                    <span class="navi-client-claim">IMC</span>

                <span data-responsive-toggle="imc-topbar-el" data-hide-for="large">
                    <!-- menu button -->
                    <button title="Open personal menu" data-toggle="imc-topbar-el" class="icon icon--burger-small icon--default-display imc-topbar__container__menu">
                        </button>
                </span>
            </div>

            <div class="imc-topbar__container__line">
                <h3 class="outline">Menu</h3>

                <div class="top-bar stacked-for-medium imc-topbar__container__item-wrapper" id="imc-topbar-el"> <!-- foundation topbar -->
                    <div class="top-bar-left"> <!-- foundation topbar left -->
                        <!-- Left Nav Section -->
                        <ul class="vertical large-horizontal menu" data-responsive-menu="drilldown large-dropdown" data-auto-height="true">
    <li tabindex="0" class="has-submenu is-dropdown-submenu-parent align-left imc-topbar__submenu">
        <a title="English" href="#" class="imc-topbar__submenu__parent" onclick="event.preventDefault(); return false;" id="NL_LANGUAGE_MENU_DROPDOWN">
            <span class="imc-topbar__submenu__parent__text">English</span>
            <span class="icon icon--folder-expand-large icon--default-font-weight show-for-large"></span>
        </a>
        <ul class="submenu menu vertical imc-topbar__submenu__list">
                <li class="imc-topbar__item">
                    <a id="NL_LANGUAGE_de" class="navi-language-entry" href="/pages/saml-request.jsf?locale=de&amp;includeViewParams=true" target="_self" rel="" lang="Deutsch" title="Deutsch">
                            <span class="imc-topbar__item__text">Deutsch</span>
                    </a>
                </li>
                <li class="imc-topbar__item">
                    <a id="NL_LANGUAGE_en-gb" class="navi-language-entry" href="/pages/saml-request.jsf?locale=en-gb&amp;includeViewParams=true" target="_self" rel="" lang="English" title="English">
                            <span class="imc-topbar__item__text">English</span>
                    </a>
                </li>
                <li class="imc-topbar__item">
                    <a id="NL_LANGUAGE_es" class="navi-language-entry" href="/pages/saml-request.jsf?locale=es&amp;includeViewParams=true" target="_self" rel="" lang="EspaÃ±ol" title="EspaÃ±ol">
                            <span class="imc-topbar__item__text">EspaÃ±ol</span>
                    </a>
                </li>
                <li class="imc-topbar__item">
                    <a id="NL_LANGUAGE_fr" class="navi-language-entry" href="/pages/saml-request.jsf?locale=fr&amp;includeViewParams=true" target="_self" rel="" lang="FranÃ§ais" title="FranÃ§ais">
                            <span class="imc-topbar__item__text">FranÃ§ais</span>
                    </a>
                </li>
                <li class="imc-topbar__item">
                    <a id="NL_LANGUAGE_it" class="navi-language-entry" href="/pages/saml-request.jsf?locale=it&amp;includeViewParams=true" target="_self" rel="" lang="Italiano" title="Italiano">
                            <span class="imc-topbar__item__text">Italiano</span>
                    </a>
                </li>
                <li class="imc-topbar__item">
                    <a id="NL_LANGUAGE_pt-pt" class="navi-language-entry" href="/pages/saml-request.jsf?locale=pt-pt&amp;includeViewParams=true" target="_self" rel="" lang="PortuguÃªs" title="PortuguÃªs">
                            <span class="imc-topbar__item__text">PortuguÃªs</span>
                    </a>
                </li>
        </ul>
    </li>
                        </ul>
                    </div>

                    <div class="top-bar-right"><!-- foundation topbar right -->
                        <!-- Right Nav Section -->
                        <ul class="vertical large-horizontal menu" data-responsive-menu="drilldown large-dropdown" data-auto-height="true">
                            <li style="display:none"><!-- Dummy needed for tab key navigation --></li>
                        </ul>
                    </div>
                </div>

            </div>
        </div>
    </nav>
        </div>
    </div>
                    </div>
                    <div class="content-section">
                        <div class="full-size-section "><form id="samlTempForm" name="samlTempForm" method="post" action="/pages/saml-request.jsf" enctype="application/x-www-form-urlencoded"><input type="hidden" id="SAMLRequest" name="SAMLRequest" value="PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDJwOkF1dGhuUmVxdWVzdCB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIgRGVzdGluYXRpb249Imh0dHBzOi8vbG9naW4uZW5nZWx2b2Vsa2Vycy5jb20vY2FzL2lkcC9wcm9maWxlL1NBTUwyL1BPU1QvU1NPIiBGb3JjZUF1dGhuPSJmYWxzZSIgSUQ9Il8zNTQwMzExMjg4NmM3YTNkNzc2ZWVhZDgyMzcyNDUyMCIgSXNQYXNzaXZlPSJmYWxzZSIgSXNzdWVJbnN0YW50PSIyMDIxLTAxLTE1VDExOjMwOjUxLjA2MVoiIFByb3RvY29sQmluZGluZz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmJpbmRpbmdzOkhUVFAtUE9TVCIgUHJvdmlkZXJOYW1lPSJodHRwczovL2xvZ2luLmVuZ2Vsdm9lbGtlcnMuY29tL2Nhcy9pZHAvcHJvZmlsZS9TQU1MMi9QT1NUL1NTTyIgVmVyc2lvbj0iMi4wIj48c2FtbDJwOklzc3VlciB4bWxuczpzYW1sMnA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPmh0dHBzOi8vYWNhZGVteS5lbmdlbHZvZWxrZXJzLmNvbS9wYWdlcy9zYW1sLXJldHVybi5qc2Y8L3NhbWwycDpJc3N1ZXI+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+DQo8ZHM6U2lnbmVkSW5mbyB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+DQo8ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiLz4NCjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIi8+DQo8ZHM6UmVmZXJlbmNlIFVSST0iI18zNTQwMzExMjg4NmM3YTNkNzc2ZWVhZDgyMzcyNDUyMCIgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPg0KPGRzOlRyYW5zZm9ybXMgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPg0KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIvPg0KPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiLz4NCjwvZHM6VHJhbnNmb3Jtcz4NCjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiLz4NCjxkczpEaWdlc3RWYWx1ZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+ZStHZnhUT2dvVXNjeTNUQUUxcFhBemk3akdVPTwvZHM6RGlnZXN0VmFsdWU+DQo8L2RzOlJlZmVyZW5jZT4NCjwvZHM6U2lnbmVkSW5mbz4NCjxkczpTaWduYXR1cmVWYWx1ZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+DQpMdHBOM0FVQm5VZmQ4VXVDMEI2V3ZzdGUxU040OWpWL2F3N3RJUXBmUVR4RmVsdkp3aWtxckNUMkJXRTRvQitQcUoyalJrYWU0Zy9tDQpRa3VKY09ReWovQ2tMT3dkaDI2MWJqRUZmTjN1UkRZNTNLcDM1aDZYZXVEQjJ3cGJHYzZDemFwelB6R2d2L3QybTI1R0wycUZyaG1zDQpoVTVIOU9scE4vUzkyK1FqTzB1ajZDZFlSYno4MmVjLzVVdkdscEJRbVo4TkZBckN0SStEQUVvM2h2bDVYbU5CQ2lyVFc2ZlRKRkYrDQpLMGNXbks3MnNzZndaeG9razEyaG1CbzFQTmV5VDE4cFhBSURUVE1YbGlmWGd4RTdqV3pDbDF6SFFOd244YWp4dU44a2dIOXh2RDBDDQpFaXlTU1VrY2Fqc0hhZjRqVlNENlVCeC80bmtPazZ4RE9vdzdiUT09DQo8L2RzOlNpZ25hdHVyZVZhbHVlPg0KPC9kczpTaWduYXR1cmU+PHNhbWwycDpOYW1lSURQb2xpY3kgQWxsb3dDcmVhdGU9InRydWUiIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6dW5zcGVjaWZpZWQiLz48c2FtbDJwOlJlcXVlc3RlZEF1dGhuQ29udGV4dD48c2FtbDI6QXV0aG5Db250ZXh0Q2xhc3NSZWYgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkPC9zYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj48L3NhbWwycDpSZXF1ZXN0ZWRBdXRobkNvbnRleHQ+PC9zYW1sMnA6QXV0aG5SZXF1ZXN0Pg==" /><input type="hidden" id="RelayState" name="RelayState" value="authentication" /><input type="hidden" name="samlTempForm_SUBMIT" value="1" /><input type="hidden" name="javax.faces.ViewState" value="R1EZDiBRZFlPbqy3g4MYM0HEKqofM3W1JGJq2OfTxANjwTN3GnDfIFZBxCNDtL+1Xd1NYTVEl+AtzGVYFhXfn0uiWhAb5KeCcf1+h3kO+pVcbn0H5dx8m1GLaSpJINdcqp3sKMOUxAN1fqU60azbuHoiucUQd+mRHe4fyTFPt0eHAC6cxz4oI/XeSvXQ/bDFjnJvWnX0JhADAbSofw4Pwjc4xs3vMI8VoGbxroTC984zh9ZSAWO4gF6CpBErwiPhpZ8TkMdzDQvg5drp0lPreUAX9h+ltHi+Us1Lr7hOnCd55kLUi7Nr27cdqzIKXBcmO0fE/CMTXDYE7YXaAJ+YVfYYKc4MzgYDbCmWzmvLyaAIIdWaXQo7aNwUpZdiGt8f5bgc+cuaxE3FBd915dJQ+ayNwKPOT4MZObbAXzv/FeDk6RY95VLgv9llJ5PhmdWl0bWwdEqkV4cJG2m8jb5N/4ZRU3A6epfWgITRSOQfZcd8m/wldzoWYnmeItNLdX2lHYbvuAjr4+7LGhQf6U+uL7DvakKmkLs7x/r0V1XGTtBTZ2qzs/dN/phyODeKXupYFOdoVqib8kMB9vOd4zhhG7Wl1m57DCg6/j6cC1b8N3qW+vKZtRAZeKVrxsBecOQx5jwZjp3UT1vKjRhv5uWOcKKcP+ZCxZANTURSSu4mEv17Q3VLI7DFmSyLFfoa2S2ZPByz3MmplF1OpP92bdBNMQKA5d7bX+oAEzRNBnLIozGFiG3JUwnOjfe5d/+eC+ayjzlEQWErOd38CyZxqiPMd/K3TrDRuJv0lSwSMWgbKhjSCkNUbFgUdSft6fQ1Cr3TqJ5OJpbufse920oGdS/kyV8jnAMRffiD32peKD3stJV4tJnOq4vHmzeqjiaaHEMKsbkq/THLfJ9knuylTLsfI6m/8NBIc8rWGXoqhv+UTc20fmEDemifIHBwiAuHW5QRtTDRkuiCkE3CutbVJ6UNNaHolfrJZ+7yeDmZXCXiD0U=" autocomplete="off" /></form>
            <!-- POST navigation with form submit via JavaScript -->
            <script type="text/javascript">
                function submitPage() {
                    document.getElementById("samlTempForm").action = "https://login.engelvoelkers.com/cas/idp/profile/SAML2/POST/SSO";
                    document.getElementById("samlTempForm").submit();
                }

                submitPage();
            </script>
                        </div>
                    </div>

    <!-- FOOTER BEGIN -->
        <footer role="contentinfo" class="footer-section hide-for-print">
            <div class="">
                <div class="grid-container">
                    <div class="grid-x check">
                        <nav class="nav-footer cell small-24" role="navigation" aria-labelledby="menuTitleFooterMenu">
                            <h2 class="outline" id="menuTitleFooterMenu">Footer navigation</h2>
                                <div>
                                    <ul>
    <li tabindex="0" class="nav-entry">
        <a id="NL_AboutUs" href="/pages/external-dashboard.jsf?dashboardId=122415" target="_self" rel="" lang="en-gb" title="About us" tabindex="0" role="link" class="">
                <span class="imc-topbar__item__text">About us</span>
        </a>
    </li>
    <li tabindex="0" class="nav-entry">
        <a id="NL_FAQ" href="/pages/external-dashboard.jsf?dashboardId=122412" target="_self" rel="" lang="en-gb" title="Open FAQ" tabindex="0" role="link" class="">
                <span class="imc-topbar__item__text">FAQ</span>
        </a>
    </li>
    <li tabindex="0" class="nav-entry">
        <a id="NL_TERMSOFSERVICE" href="/pages/external-dashboard.jsf?dashboardId=121866" target="_self" rel="" lang="en-gb" title="Open terms of use" tabindex="0" role="link" class="">
                <span class="imc-topbar__item__text">Terms of use</span>
        </a>
    </li>
    <li tabindex="0" class="nav-entry">
        <a id="NL_Data policy" href="/pages/external-dashboard.jsf?dashboardId=111222" target="_self" rel="" lang="en-gb" title="Open Data policy" tabindex="0" role="link" class="">
                <span class="imc-topbar__item__text">Data policy</span>
        </a>
    </li>
    <li tabindex="0" class="nav-entry">
        <a id="NL_IMPRINT" href="/pages/external-dashboard.jsf?dashboardId=112441" target="_self" rel="" lang="en-gb" title="Open imprint" tabindex="0" role="link" class="">
                <span class="imc-topbar__item__text">Imprint</span>
        </a>
    </li>
                                    </ul>
                                </div>
                        </nav>
                    </div>
                </div>
            </div>
        </footer>
    <!-- FOOTER END -->
            </div>
            <script src="/resources/javascript/custom_scripts.js"></script>
            <script>
                $(document).foundation();

                // FOUNDATION BUG START
                // issue: mobile menu is missing some items
                // https://github.com/zurb/foundation-sites/issues/10478
                // to be removed within: https://jira.im-c.de/browse/LMSILP-9950
                $(function(){
                    if (!Foundation.MediaQuery.atLeast("large")){
                        // workaround for https://github.com/zurb/foundation-sites/issues/10478
                        $(".is-dropdown-submenu-parent").removeClass("is-dropdown-submenu-parent");
                    }
                });
                // FOUNDATION BUG END
            </script>
		
	<script type="text/javascript">
        (function() {
            function reloadFonts() {
                var link = document.createElement("link");
                link.href = "/resources/design/css/fonts.css?dmy=" + Math.random();
                link.type = "text/css";
                link.rel = "stylesheet";
                document.getElementsByTagName("head")[0].appendChild(link);
            }

            var isAppleDevice = navigator.platform.match(/(Mac|iPhone|iPod|iPad)/i);
            if (isAppleDevice) {
                reloadFonts();
            }
        })();
    </script></body>
</html>